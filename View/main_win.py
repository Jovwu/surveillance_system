# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import traceback

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow

from View.MyQLabelImpl import MyQLabel
from View.add_win import AddPersonForm


class Ui_main_win(object):
    def setupUi(self, main_win):
        main_win.setObjectName("main_win")
        main_win.resize(932, 468)
        self.centralwidget = QtWidgets.QWidget(main_win)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 50, 911, 411))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.main_tab = QtWidgets.QTabWidget(self.verticalLayoutWidget)
        self.main_tab.setMouseTracking(False)
        self.main_tab.setObjectName("main_tab")
        self.monitor_tab = QtWidgets.QWidget()
        self.monitor_tab.setObjectName("monitor_tab")
        self.gridLayoutWidget = QtWidgets.QWidget(self.monitor_tab)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 10, 881, 401))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.M_gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.M_gridLayout.setContentsMargins(0, 0, 0, 0)
        self.M_gridLayout.setSpacing(20)
        self.M_gridLayout.setObjectName("M_gridLayout")
        self.M_channel_info_vl = QtWidgets.QVBoxLayout()
        self.M_channel_info_vl.setObjectName("M_channel_info_vl")
        self.M_channel_choice_hl = QtWidgets.QHBoxLayout()
        self.M_channel_choice_hl.setObjectName("M_channel_choice_hl")
        self.M_channel_choice_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.M_channel_choice_label.setFont(font)
        self.M_channel_choice_label.setObjectName("M_channel_choice_label")
        self.M_channel_choice_hl.addWidget(self.M_channel_choice_label)
        self.M_channel_choice_combox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.M_channel_choice_combox.setEditable(False)
        self.M_channel_choice_combox.setObjectName("M_channel_choice_combox")
        self.M_channel_choice_hl.addWidget(self.M_channel_choice_combox)
        self.M_channel_choice_hl.setStretch(0, 1)
        self.M_channel_choice_hl.setStretch(1, 2)
        self.M_channel_info_vl.addLayout(self.M_channel_choice_hl)

        self.M_channel_name_vl = QtWidgets.QHBoxLayout()
        self.M_channel_name_vl.setObjectName("M_channel_name_vl")
        self.channel_name_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.channel_name_label.setFont(font)
        self.channel_name_label.setObjectName("channel_name_label")
        self.M_channel_name_vl.addWidget(self.channel_name_label)
        self.channel_name_show_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.channel_name_show_label.setObjectName("channel_name_show_label")
        self.M_channel_name_vl.addWidget(self.channel_name_show_label)
        self.M_channel_name_vl.setStretch(0, 1)
        self.M_channel_name_vl.setStretch(1, 2)
        self.M_channel_info_vl.addLayout(self.M_channel_name_vl)

        self.M_channel_area_vl = QtWidgets.QHBoxLayout()
        self.M_channel_area_vl.setObjectName("M_channel_area_vl")
        self.channel_area_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.channel_area_label.setFont(font)
        self.channel_area_label.setObjectName("channel_area_label")
        self.M_channel_area_vl.addWidget(self.channel_area_label)
        self.channel_area_show_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.channel_area_show_label.setObjectName("channel_area_show_label")
        self.M_channel_area_vl.addWidget(self.channel_area_show_label)
        self.M_channel_area_vl.setStretch(0, 1)
        self.M_channel_area_vl.setStretch(1, 2)
        self.M_channel_info_vl.addLayout(self.M_channel_area_vl)



        self.M_channel_model_vl = QtWidgets.QHBoxLayout()
        self.M_channel_model_vl.setObjectName("M_channel_model_vl")
        self.channel_mode_label = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.channel_mode_label.setFont(font)
        self.channel_mode_label.setObjectName("channel_mode_label")
        self.M_channel_model_vl.addWidget(self.channel_mode_label)
        self.channel_mode_show_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.channel_mode_show_label.setObjectName("channel_mode_show_label")
        self.M_channel_model_vl.addWidget(self.channel_mode_show_label)
        self.M_channel_model_vl.setStretch(0, 1)
        self.M_channel_model_vl.setStretch(1, 2)
        self.M_channel_info_vl.addLayout(self.M_channel_model_vl)



        self.M_channel_features_hl = QtWidgets.QHBoxLayout()
        self.M_channel_features_hl.setObjectName("M_channel_features_hl")
        self.M_channel_features_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.M_channel_features_label.setEnabled(True)
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.M_channel_features_label.setFont(font)
        self.M_channel_features_label.setObjectName("M_channel_features_label")
        self.M_channel_features_hl.addWidget(self.M_channel_features_label)
        self.M_channel_features_show_label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.M_channel_features_show_label.setObjectName("M_channel_features_show_label")
        self.M_channel_features_hl.addWidget(self.M_channel_features_show_label)
        self.M_channel_features_hl.setStretch(0, 1)
        self.M_channel_features_hl.setStretch(1, 2)
        self.M_channel_info_vl.addLayout(self.M_channel_features_hl)
        self.M_gridLayout.addLayout(self.M_channel_info_vl, 0, 0, 1, 1)

        self.M_gridLayout.setColumnStretch(0, 1)
        self.M_gridLayout.setColumnStretch(1, 2)
        self.main_tab.addTab(self.monitor_tab, "")
        self.class_tab = QtWidgets.QWidget()
        self.class_tab.setObjectName("class_tab")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.class_tab)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 881, 361))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.C_gl = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.C_gl.setContentsMargins(0, 0, 0, 0)
        self.C_gl.setObjectName("C_gl")
        self.main_tab.addTab(self.class_tab, "")
        self.dorm_tab = QtWidgets.QWidget()
        self.dorm_tab.setObjectName("dorm_tab")
        self.gridLayoutWidget_5 = QtWidgets.QWidget(self.dorm_tab)
        self.gridLayoutWidget_5.setGeometry(QtCore.QRect(10, 10, 881, 361))
        self.gridLayoutWidget_5.setObjectName("gridLayoutWidget_5")
        self.DO_gl = QtWidgets.QGridLayout(self.gridLayoutWidget_5)
        self.DO_gl.setContentsMargins(0, 0, 0, 0)
        self.DO_gl.setObjectName("DO_gl")
        self.main_tab.addTab(self.dorm_tab, "")
        self.all_tab = QtWidgets.QWidget()
        self.all_tab.setObjectName("all_tab")
        self.gridLayoutWidget_6 = QtWidgets.QWidget(self.all_tab)
        self.gridLayoutWidget_6.setGeometry(QtCore.QRect(10, 10, 881, 361))
        self.gridLayoutWidget_6.setObjectName("gridLayoutWidget_6")
        self.A_gl = QtWidgets.QGridLayout(self.gridLayoutWidget_6)
        self.A_gl.setContentsMargins(0, 0, 0, 0)
        self.A_gl.setObjectName("A_gl")
        self.main_tab.addTab(self.all_tab, "")
        self.data_tab = QtWidgets.QWidget()
        self.data_tab.setObjectName("data_tab")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.data_tab)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(10, 10, 881, 361))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.D_gl = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.D_gl.setContentsMargins(0, 0, 0, 0)
        self.D_gl.setObjectName("D_gl")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.D_choice_channel_hl = QtWidgets.QHBoxLayout()
        self.D_choice_channel_hl.setObjectName("D_choice_channel_hl")
        self.D_choice_channel_label = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.D_choice_channel_label.setObjectName("D_choice_channel_label")
        self.D_choice_channel_hl.addWidget(self.D_choice_channel_label)
        self.D_choice_channel_combox = QtWidgets.QComboBox(self.gridLayoutWidget_3)
        self.D_choice_channel_combox.setEnabled(True)
        self.D_choice_channel_combox.setObjectName("D_choice_channel_combox")
        self.D_choice_channel_combox.addItem("")
        self.D_choice_channel_hl.addWidget(self.D_choice_channel_combox)
        self.D_choice_channel_hl.setStretch(1, 2)
        self.verticalLayout_2.addLayout(self.D_choice_channel_hl)
        self.D_choice_mode_hl = QtWidgets.QHBoxLayout()
        self.D_choice_mode_hl.setObjectName("D_choice_mode_hl")
        self.D_choice_mode_label = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.D_choice_mode_label.setObjectName("D_choice_mode_label")
        self.D_choice_mode_hl.addWidget(self.D_choice_mode_label)
        self.D_chioce_mode_combox = QtWidgets.QComboBox(self.gridLayoutWidget_3)
        self.D_chioce_mode_combox.setObjectName("D_chioce_mode_combox")
        self.D_chioce_mode_combox.addItem("")
        self.D_choice_mode_hl.addWidget(self.D_chioce_mode_combox)
        self.D_choice_mode_hl.setStretch(0, 1)
        self.D_choice_mode_hl.setStretch(1, 2)
        self.verticalLayout_2.addLayout(self.D_choice_mode_hl)
        self.D_chioce_features_hl = QtWidgets.QHBoxLayout()
        self.D_chioce_features_hl.setObjectName("D_chioce_features_hl")
        self.D_chioce_features_label = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.D_chioce_features_label.setObjectName("D_chioce_features_label")
        self.D_chioce_features_hl.addWidget(self.D_chioce_features_label)
        self.D_chioce_features_combox = QtWidgets.QComboBox(self.gridLayoutWidget_3)
        self.D_chioce_features_combox.setObjectName("D_chioce_features_combox")
        self.D_chioce_features_combox.addItem("")
        self.D_chioce_features_hl.addWidget(self.D_chioce_features_combox)
        self.D_chioce_features_hl.setStretch(0, 1)
        self.D_chioce_features_hl.setStretch(1, 2)
        self.verticalLayout_2.addLayout(self.D_chioce_features_hl)
        self.D_chioce_time_hl = QtWidgets.QHBoxLayout()
        self.D_chioce_time_hl.setObjectName("D_chioce_time_hl")
        self.D_chioce_time_checkbox = QtWidgets.QCheckBox(self.gridLayoutWidget_3)
        self.D_chioce_time_checkbox.setObjectName("D_chioce_time_checkbox")
        self.D_chioce_time_hl.addWidget(self.D_chioce_time_checkbox)
        self.D_chioce_time_timeedit = QtWidgets.QDateEdit(self.gridLayoutWidget_3)
        self.D_chioce_time_timeedit.setEnabled(False)
        self.D_chioce_time_timeedit.setDateTime(QtCore.QDateTime(QtCore.QDate(2021, 4, 23), QtCore.QTime(0, 0, 0)))
        self.D_chioce_time_timeedit.setCalendarPopup(True)
        self.D_chioce_time_timeedit.setObjectName("D_chioce_time_timeedit")
        self.D_chioce_time_hl.addWidget(self.D_chioce_time_timeedit)
        self.D_chioce_time_hl.setStretch(0, 1)
        self.D_chioce_time_hl.setStretch(1, 2)
        self.verticalLayout_2.addLayout(self.D_chioce_time_hl)
        self.pushButton = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_2.addWidget(self.pushButton_3)
        self.D_gl.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
        self.D_data_scrollarea = QtWidgets.QScrollArea(self.gridLayoutWidget_3)
        self.D_data_scrollarea.setWidgetResizable(True)
        self.D_data_scrollarea.setObjectName("D_data_scrollarea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 653, 357))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.D_data_scrollarea.setWidget(self.scrollAreaWidgetContents)
        self.D_gl.addWidget(self.D_data_scrollarea, 0, 1, 1, 1)
        self.D_gl.setColumnStretch(0, 1)
        self.D_gl.setColumnStretch(1, 3)
        self.main_tab.addTab(self.data_tab, "")
        self.person_tab = QtWidgets.QWidget()
        self.person_tab.setObjectName("person_tab")
        self.gridLayoutWidget_4 = QtWidgets.QWidget(self.person_tab)
        self.gridLayoutWidget_4.setGeometry(QtCore.QRect(10, 10, 891, 371))
        self.gridLayoutWidget_4.setObjectName("gridLayoutWidget_4")

        # self.P_gl = QtWidgets.QGridLayout(self.gridLayoutWidget_4)
        # self.P_gl.setContentsMargins(0, 0, 0, 0)
        # self.P_gl.setObjectName("P_gl")
        # self.P_search_hl = QtWidgets.QHBoxLayout()
        # self.P_search_hl.setObjectName("P_search_hl")
        # spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        # self.P_search_hl.addItem(spacerItem)
        # self.P_search_label = QtWidgets.QLabel(self.gridLayoutWidget_4)
        # self.P_search_label.setObjectName("P_search_label")
        # self.P_search_hl.addWidget(self.P_search_label)
        # self.P_search_lineedit = QtWidgets.QLineEdit(self.gridLayoutWidget_4)
        # self.P_search_lineedit.setObjectName("P_search_lineedit")
        # self.P_search_hl.addWidget(self.P_search_lineedit)
        # self.P_search_btn = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        # self.P_search_btn.setObjectName("P_search_btn")
        # self.P_search_hl.addWidget(self.P_search_btn)
        # spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        # self.P_search_hl.addItem(spacerItem1)
        # self.P_search_hl.setStretch(0, 8)
        # self.P_search_hl.setStretch(1, 1)
        # self.P_search_hl.setStretch(2, 5)
        # self.P_search_hl.setStretch(3, 2)
        # self.P_search_hl.setStretch(4, 8)
        # self.P_gl.addLayout(self.P_search_hl, 0, 0, 1, 1)
        # self.P_data_table = QtWidgets.QTableWidget(self.gridLayoutWidget_4)
        # self.P_data_table.setObjectName("P_data_table")
        # self.P_data_table.setColumnCount(0)
        # self.P_data_table.setRowCount(0)
        # self.P_gl.addWidget(self.P_data_table, 1, 0, 1, 1)
        self.P_gl = QtWidgets.QGridLayout(self.gridLayoutWidget_4)
        self.P_gl.setContentsMargins(0, 0, 0, 0)
        self.P_gl.setObjectName("P_gl")
        self.P_search_hl = QtWidgets.QHBoxLayout()
        self.P_search_hl.setObjectName("P_search_hl")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.P_search_hl.addItem(spacerItem)
        self.P_search_label = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.P_search_label.setObjectName("P_search_label")
        self.P_search_hl.addWidget(self.P_search_label)
        self.P_search_lineedit = QtWidgets.QLineEdit(self.gridLayoutWidget_4)
        self.P_search_lineedit.setObjectName("P_search_lineedit")
        self.P_search_hl.addWidget(self.P_search_lineedit)
        self.P_search_btn = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        self.P_search_btn.setObjectName("P_search_btn")
        self.P_search_hl.addWidget(self.P_search_btn)
        self.P_add_btn = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        self.P_add_btn.setObjectName("P_add_btn")
        self.P_search_hl.addWidget(self.P_add_btn)
        self.P_reset_btn = QtWidgets.QPushButton(self.gridLayoutWidget_4)
        self.P_reset_btn.setObjectName("P_reset_btn")
        self.P_search_hl.addWidget(self.P_reset_btn)
        self.P_search_hl.setStretch(0, 9)
        self.P_search_hl.setStretch(2, 5)
        self.P_search_hl.setStretch(3, 2)
        self.P_search_hl.setStretch(4, 2)
        self.P_search_hl.setStretch(5, 2)
        self.P_gl.addLayout(self.P_search_hl, 0, 0, 1, 1)
        self.P_data_table = QtWidgets.QTableWidget(self.gridLayoutWidget_4)
        self.P_data_table.setObjectName("P_data_table")
        self.P_data_table.setColumnCount(0)
        self.P_data_table.setRowCount(0)
        self.P_gl.addWidget(self.P_data_table, 1, 0, 1, 1)


        self.main_tab.addTab(self.person_tab, "")
        self.setting_tab = QtWidgets.QWidget()
        self.setting_tab.setObjectName("setting_tab")
        self.main_tab.addTab(self.setting_tab, "")
        self.verticalLayout.addWidget(self.main_tab)
        main_win.setCentralWidget(self.centralwidget)

        self.retranslateUi(main_win)
        self.main_tab.setCurrentIndex(1)
        self.M_channel_choice_combox.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(main_win)

    def retranslateUi(self, main_win):
        _translate = QtCore.QCoreApplication.translate
        main_win.setWindowTitle(_translate("main_win", "校园防御系统"))
        self.M_channel_choice_label.setText(_translate("main_win", "通道选择："))

        self.channel_name_label.setText(_translate("main_win", "通道名称："))
        self.channel_name_show_label.setText(_translate("main_win", "名称"))

        self.channel_area_label.setText(_translate("main_win", "通道区域："))
        self.channel_area_show_label.setText(_translate("main_win", "区域"))

        self.channel_mode_label.setText(_translate("main_win", "通道模式："))
        self.channel_mode_show_label.setText(_translate("main_win", "普通模式"))
        self.M_channel_features_label.setText(_translate("main_win", "通道功能："))
        self.M_channel_features_show_label.setText(_translate("main_win", "口罩识别"))

        self.main_tab.setTabText(self.main_tab.indexOf(self.monitor_tab), _translate("main_win", "监控模式"))
        self.main_tab.setTabText(self.main_tab.indexOf(self.class_tab), _translate("main_win", "教室打卡模式"))
        self.main_tab.setTabText(self.main_tab.indexOf(self.dorm_tab), _translate("main_win", "宿舍闸机模式"))
        self.main_tab.setTabText(self.main_tab.indexOf(self.all_tab), _translate("main_win", "所有通道模式"))

        self.D_choice_channel_label.setText(_translate("main_win", "选择通道"))
        self.D_choice_channel_combox.setItemText(0, _translate("main_win", "通道1"))
        self.D_choice_mode_label.setText(_translate("main_win", "选择模式"))
        self.D_chioce_mode_combox.setItemText(0, _translate("main_win", "全部模式"))
        self.D_chioce_features_label.setText(_translate("main_win", "选择行为"))
        self.D_chioce_features_combox.setItemText(0, _translate("main_win", "判定为陌生人"))
        self.D_chioce_time_checkbox.setText(_translate("main_win", "选择时间"))
        self.pushButton.setText(_translate("main_win", "搜索"))
        self.pushButton_2.setText(_translate("main_win", "重置"))
        self.pushButton_3.setText(_translate("main_win", "数据导出"))
        self.main_tab.setTabText(self.main_tab.indexOf(self.data_tab), _translate("main_win", "数据管理"))

        # self.P_search_label.setText(_translate("main_win", "搜索"))
        # self.P_search_btn.setText(_translate("main_win", "确定"))
        self.P_search_label.setText(_translate("main_win", "搜索"))
        self.P_search_btn.setText(_translate("main_win", "确定"))
        self.P_add_btn.setText(_translate("main_win", "添加人员"))
        self.P_reset_btn.setText(_translate("main_win", "重置"))

        self.main_tab.setTabText(self.main_tab.indexOf(self.person_tab), _translate("main_win", "人员管理"))
        self.main_tab.setTabText(self.main_tab.indexOf(self.setting_tab), _translate("main_win", "系统设置"))

class MyMainForm(QMainWindow, Ui_main_win):
    def __init__(self, labelDict,CHANNEL_DICT,ChannelRefreshThreadDict,parent=None):
        super(MyMainForm, self).__init__(parent)
        # Label字典
        self.labelDict = labelDict
        self.setupUi(self)

        self.channelDict = CHANNEL_DICT
        self.ChannelRefreshThreadDict = ChannelRefreshThreadDict


        # 设置布局字典
        self.glDict = dict()
        self.glDict["A_label"] = {
            "tab_gl":self.gridLayoutWidget_6,
            "label_gl":self.A_gl
        }
        self.glDict["class"] = {
            "tab_gl": self.gridLayoutWidget_2,
            "label_gl": self.C_gl
        }
        self.glDict["dorm"] = {
            "tab_gl": self.gridLayoutWidget_5,
            "label_gl": self.DO_gl
        }

        # 设置label
        self.setLabel()



    def setLabel(self):
        # 设置主显示label
        self.M_frame_label = MyQLabel(self.gridLayoutWidget,channelDict=self.channelDict)
        self.M_frame_label.setObjectName("M_frame_label")
        self.M_gridLayout.addWidget(self.M_frame_label, 0, 1, 1, 1)

        self.labelDict["M_label"] = self.M_frame_label
        # 设置A_label
        self.setGLbyLabel("A_label")
        # 设置宿舍
        self.setGLbyLabel("dorm")
        # 设置教室
        self.setGLbyLabel("class")

        # 设置A_label

    # 根据Label数量设置Gl
    def setGLbyLabel(self,clz):

        curRow = 0
        curCol = 0
        channelList = None
        count = 0
        labelBandStr = None
        # 如果是所有通道
        if clz == "A_label":
           # 获得数量和通道
           channelList = self.labelDict["labelClass"]["all"]
           count = len(channelList)
           print("所有通道有{0}，分别是{1}".format(count, channelList))
           labelBandStr = "A_label"
        elif clz == "class":# 如果是教室通道
            channelList = self.labelDict["labelClass"]["class"]
            count = len(channelList)
            print("教室通道有{0}，分别是{1}".format(count,channelList))
            labelBandStr = "C_label"
        elif clz == "dorm":# 如果是宿舍通道
            channelList = self.labelDict["labelClass"]["dormin"]
            for dormout in self.labelDict["labelClass"]["dormout"]:
                channelList.append(dormout)
            count = len(channelList)
            print("宿舍通道有{0}，分别是{1}".format(count, channelList))
            labelBandStr = "C_label"




        # 如果没有通道
        if count == 0:
            label = MyQLabel(self.glDict[clz]["tab_gl"])
            self.glDict[clz]["label_gl"].addWidget(label,0, 0, 1, 1)
            label.setText("暂无通道！")
            return

        # 获得布局大小
        # gl_width = self.glDict[clz]["label_gl"].width()
        # gl_height = self.glDict[clz]["label_gl"].height()

        # 如果通道数为1
        if count == 1:
            label = MyQLabel(self.glDict[clz]["tab_gl"],channelID=channelList[0],channelDict=self.channelDict)
            self.glDict[clz]["label_gl"].addWidget(label,0, 0, 1, 1)
            label.setFixedSize(361 / count, 361 / count)
            self.labelDict[labelBandStr][channelList[0]] = label
            return



        # 设置
        for channelID in channelList:

            # 计算大小

            # 创建一个label
            label = MyQLabel(self.glDict[clz]["tab_gl"],channelID=channelList[0],channelDict=self.channelDict)
            # 添加到布局
            self.glDict[clz]["label_gl"].addWidget(label,curRow,curCol,1,1)
            label.setFixedSize(881/count,881/count)
            curCol += 1
            if curCol == 8:
                curCol = 0
                curRow += 1

            #label.setText(label,channelID)
            # 在Labeldict中绑定
            self.labelDict[labelBandStr][channelID] = label

    # 设置通道信息
    def setChannel(self):
        self.set_M_tab()
        # 设置连接信号
        self.connect()


    #设置监控tab
    def set_M_tab(self):
        # 初始化combox赋值
        channelList = self.labelDict["labelClass"]["all"]
        # 设置初值
        for channelID in channelList:
            self.M_channel_choice_combox.addItem(str(channelID))
        self.M_channel_choice_combox.setCurrentIndex(0)
        self.lastComboxChannelID = int(self.M_channel_choice_combox.currentText())


    def connect(self):
        self.main_tab.currentChanged['int'].connect(self.tabfun)
        self.M_channel_choice_combox.currentIndexChanged.connect(self.M_tab_combox_change)
        self.P_add_btn.clicked.connect(self.P_add_person)


    # 设置M_tab_combox选择事件
    def M_tab_combox_change(self):

        # 设置上一次label
        self.ChannelRefreshThreadDict[self.lastComboxChannelID].setLabelFlag(2)

        # 获取当前的index
        channelID = int(self.M_channel_choice_combox.currentText())
        self.ChannelRefreshThreadDict[channelID].setLabelFlag(1)

        self.lastComboxChannelID = channelID


        # 填充信息
        # 填充name
        self.channel_name_show_label.setText(self.channelDict[channelID]["info"][0])
        # area
        self.channel_area_show_label.setText(self.channelDict[channelID]["info"][1])
        # mode
        self.channel_mode_show_label.setText(self.channelDict[channelID]["info"][4])
        # features
        featuresList = self.channelDict[channelID]["info"][5]
        if len(featuresList) == 0:
            self.M_channel_features_show_label.setText("暂无功能")
        else:
            str = ','
            self.M_channel_features_show_label.setText(str.join(featuresList))


    def tabfun(self,index):

        # 监控模式
        if index == 0:
            # # 取得combox的当前通道id
            # channelID = int(self.M_channel_choice_combox.currentText())
            # # 去找
            # self.ChannelRefreshThreadDict[channelID].setLabelFlag(1)
            self.M_tab_combox_change()
        elif index == 1:#教室模式
            # 取得id列表
            channelIDList = self.labelDict["labelClass"]["class"]
            for channelID in channelIDList:
                self.ChannelRefreshThreadDict[channelID].setLabelFlag(2)
        elif index == 2:#宿舍模式
            channelList = self.labelDict["labelClass"]["dormin"]
            for dormout in self.labelDict["labelClass"]["dormout"]:
                channelList.append(dormout)

            for channelID in channelList:
                self.ChannelRefreshThreadDict[channelID].setLabelFlag(2)

        elif index == 3:#所有模式
            channelIDList = self.labelDict["labelClass"]["all"]
            for channelID in channelIDList:
                self.ChannelRefreshThreadDict[channelID].setLabelFlag(3)


    # p_tab
    # 设置添加用户事件
    def P_add_person(self):
        self.add_form = AddPersonForm(self.channelDict)
        self.add_form.show()




if __name__ == '__main__':

    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    # 每一个pyqt程序中都需要有一个QApplication对象，sys.argv是一个命令行参数列表
    app = QApplication(sys.argv)
    # 实例化窗口
    form = MyMainForm()
    # 将窗口控件显示在屏幕上
    form.show()
    # 进入程序的主循环，遇到退出情况，终止程序
    sys.exit(app.exec_())